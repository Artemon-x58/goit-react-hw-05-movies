{"version":3,"file":"static/js/895.440de107.chunk.js","mappings":"kLAEaA,EAAa,SAACC,EAAKC,GAC9B,OAAOC,EAAAA,EAAAA,IACA,gCAADC,OAAiCH,GAAO,CAC1CI,OAAQ,CAAEC,SAAU,QAASC,MAAOL,GACpCM,QAAS,CACPC,OAAQ,mBACRC,cACE,gOAGLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,IAAI,GACnC,C,6ICNaC,EAAoB,WAC/B,IAAAC,GAA0CC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA/CI,EAAaF,EAAA,GAAEG,EAAgBH,EAAA,GACtCI,GAAuBC,EAAAA,EAAAA,MAAhBC,GAAiCL,EAAAA,EAAAA,GAAAG,EAAA,GAArB,GACnBG,GAAkCR,EAAAA,EAAAA,WAAS,GAAMS,GAAAP,EAAAA,EAAAA,GAAAM,EAAA,GAA1CE,EAASD,EAAA,GAAEE,EAAYF,EAAA,GACxBlB,EAAQgB,EAAaK,IAAI,SACzBC,GAAWC,EAAAA,EAAAA,MAajB,OAXAC,EAAAA,EAAAA,YAAU,WACRJ,GAAa,IAEb3B,EAAAA,EAAAA,GAAW,eAAgBO,GACxBI,MAAK,SAAAqB,GACJZ,EAAiBY,EAAIC,QACvB,IACCC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,EAAI,IAC7BG,SAAQ,kBAAMX,GAAa,EAAM,GACtC,GAAG,CAACpB,KAGFgC,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,SACGf,GACCa,EAAAA,EAAAA,KAACG,EAAAA,EAAM,KAEPH,EAAAA,EAAAA,KAACI,EAAAA,EAAU,CAACd,SAAUA,EAAUe,KAAMzB,KAI9C,EC5BA,EAJ0B,WACxB,OAAOoB,EAAAA,EAAAA,KAACzB,EAAiB,GAC3B,C,4ECDa4B,EAAS,WACpB,OACEH,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACEF,EAAAA,EAAAA,KAACM,EAAAA,GAAI,CACHC,MAAM,UACNC,OAAQ,GACRC,MAAO,GACPC,aAAc,CACZC,SAAU,WACVC,IAAK,MACLC,KAAM,MACNC,UAAW,4BAKrB,C,0FChBaC,EAAmBC,EAAAA,GAAAA,GAASC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,gHAQ5BC,EAAiBH,EAAAA,GAAAA,GAASI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,uSAe1BG,GAAqBL,EAAAA,EAAAA,IAAOM,EAAAA,GAAPN,CAAYO,IAAAA,GAAAL,EAAAA,EAAAA,GAAA,iH,SCpBjCd,EAAa,SAAHoB,GAA4B,IAAtBnB,EAAImB,EAAJnB,KAAMf,EAAQkC,EAARlC,SACjC,OACEU,EAAAA,EAAAA,KAACe,EAAgB,CAAAb,SACdG,EAAKoB,KAAI,SAAAC,GAA0B,IAAvBC,EAAED,EAAFC,GAAIhE,EAAK+D,EAAL/D,MAAOiE,EAAIF,EAAJE,KACtB,OACE5B,EAAAA,EAAAA,KAACmB,EAAc,CAAAjB,UACbF,EAAAA,EAAAA,KAACqB,EAAkB,CAACQ,GAAE,WAAAhE,OAAa8D,GAAMG,MAAO,CAAEC,KAAMzC,GAAWY,SAC5D,OAAJ0B,QAAI,IAAJA,EAAAA,EAAQjE,KAFQgE,EAMzB,KAGN,C","sources":["API/api.js","components/SearchResultsList/SearchResultsList.js","Pages/MoviesResultPage.js","components/Loader/Loader.js","components/MoviesList/MoviesList.styled.js","components/MoviesList/MoviesList.js"],"sourcesContent":["import axios from 'axios';\n\nexport const apiResults = (url, title) => {\n  return axios\n    .get(`https://api.themoviedb.org/3/${url}`, {\n      params: { language: 'en-US', query: title },\n      headers: {\n        accept: 'application/json',\n        Authorization:\n          'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIyM2FkNGFkNWM2Mzg1ZmYzYjZlZThlN2NkYzFmNWVhOCIsInN1YiI6IjY0ZjRkMzZjOWU0NTg2MDEzYWY5MmExOSIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.gw-4nvIFz2mahV7u6nEjviVxuuefwHpWagfQWIKcjSI',\n      },\n    })\n    .then(response => response.data);\n};\n","import { Loader } from 'components/Loader/Loader';\nimport { apiResults } from '../../API/api';\n\nimport { useEffect, useState } from 'react';\nimport { useLocation, useSearchParams } from 'react-router-dom';\nimport { MoviesList } from 'components/MoviesList/MoviesList';\n\nexport const SearchResultsList = () => {\n  const [resultsSearch, setResultsSearch] = useState([]);\n  const [searchParams] = useSearchParams();\n  const [isLoading, setIsLoading] = useState(false);\n  const query = searchParams.get('query');\n  const location = useLocation();\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    apiResults('search/movie', query)\n      .then(res => {\n        setResultsSearch(res.results);\n      })\n      .catch(err => console.log(err))\n      .finally(() => setIsLoading(false));\n  }, [query]);\n\n  return (\n    <>\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <MoviesList location={location} list={resultsSearch} />\n      )}\n    </>\n  );\n};\n","import { SearchResultsList } from 'components/SearchResultsList/SearchResultsList';\n\nconst MoviesResultsPage = () => {\n  return <SearchResultsList />;\n};\n\nexport default MoviesResultsPage;\n","import { Grid } from 'react-loader-spinner';\n// import 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\n\nexport const Loader = () => {\n  return (\n    <>\n      <Grid\n        color=\"#00BFFF\"\n        height={80}\n        width={80}\n        wrapperStyle={{\n          position: 'absolute',\n          top: '50%',\n          left: '50%',\n          transform: 'translate(-50%, -50%)',\n        }}\n      />\n    </>\n  );\n};\n","import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const MoviesListStyled = styled.ul`\n  list-style: none;\n  padding: 0;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n`;\n\nexport const MoviesListItem = styled.li`\n  margin: 0 10px 20px;\n  text-align: center;\n  background-color: #f5f5f5;\n  border-radius: 5px;\n  padding: 10px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n  transition: transform 0.3s ease;\n\n  &:hover {\n    transform: translateY(-5px);\n    background-color: #add8e6;\n  }\n`;\n\nexport const MoviesListItemLink = styled(Link)`\n  text-decoration: none;\n  color: #333;\n  font-weight: bold;\n  font-size: 16px;\n  display: block;\n`;\n","import {\n  MoviesListItem,\n  MoviesListItemLink,\n  MoviesListStyled,\n} from './MoviesList.styled';\n\nexport const MoviesList = ({ list, location }) => {\n  return (\n    <MoviesListStyled>\n      {list.map(({ id, title, name }) => {\n        return (\n          <MoviesListItem key={id}>\n            <MoviesListItemLink to={`/movies/${id}`} state={{ from: location }}>\n              {name ?? title}\n            </MoviesListItemLink>\n          </MoviesListItem>\n        );\n      })}\n    </MoviesListStyled>\n  );\n};\n"],"names":["apiResults","url","title","axios","concat","params","language","query","headers","accept","Authorization","then","response","data","SearchResultsList","_useState","useState","_useState2","_slicedToArray","resultsSearch","setResultsSearch","_useSearchParams","useSearchParams","searchParams","_useState3","_useState4","isLoading","setIsLoading","get","location","useLocation","useEffect","res","results","catch","err","console","log","finally","_jsx","_Fragment","children","Loader","MoviesList","list","Grid","color","height","width","wrapperStyle","position","top","left","transform","MoviesListStyled","styled","_templateObject","_taggedTemplateLiteral","MoviesListItem","_templateObject2","MoviesListItemLink","Link","_templateObject3","_ref","map","_ref2","id","name","to","state","from"],"sourceRoot":""}